plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'travelaround'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://nexus.gluonhq.com/nexus/content/repositories/releases/' }
    jcenter()
}

ext {
    junitVersion = '5.10.0'
}

sourceCompatibility = '21'
targetCompatibility = '21'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'travelaround.aroundtheworld'
    mainClass = 'travelaround.aroundtheworld.LandingPage'
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

sourceSets {
    main {
        resources.srcDirs = ["src/main/resources"]
    }
}

dependencies {
    implementation("org.json:json:20231013")
}
dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')

    implementation 'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'

    implementation 'com.dlsc.formsfx:formsfx-core:11.6.0'

    implementation 'com.gluonhq:charm-glisten:6.2.3'


    implementation 'com.gluonhq.attach:util:4.0.9'

    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.0'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}


tasks.register('runServer', JavaExec) {
    group = 'network'
    description = 'Starts the Socket Server and listens on a specified port'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'travelaround.aroundtheworld.SocketServer'  // Ensure this matches the actual server class

    // Dynamically pass port using system properties (default to 8080)
    def port = System.getProperty("port") ?: "8080"

    args port  // Pass the port as an argument to the server

    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err

    doFirst {
        println "ðŸš€ Starting Server on port $port..."
    }
}

tasks.register('startClient', JavaExec) {
    group = 'network'
    description = 'Starts the Client and connects to the Server'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'travelaround.aroundtheworld'

    def defaultIp = 'localhost'
    def defaultPort = '8080'

    def ip = project.hasProperty('ip') ? project.getProperty('ip') : defaultIp
    def port = project.hasProperty('port') ? project.getProperty('port') : defaultPort

    args ip, port  // Pass IP and port as arguments to the client

    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err


    doFirst {
        println "ðŸš€ Starting Client on $ip:$port..."
    }
}
