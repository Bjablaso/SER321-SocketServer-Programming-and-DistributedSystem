plugins {
    id 'java'
    id "com.google.protobuf" version "0.8.13" apply true
}

description = "Protocol Buffers Socket Example"

//group = 'travelaround'
//version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.18.0'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/java/buffers'
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.1'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
            }
        }
    }
}


//gradle runClient -Phost='localhost' -Pport=9099
//gradle runClient -Phost=51.20.144.68  -Pport=9099
//
task runClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = "Run the Client"
    main = 'Client.ClientComputer'

    def host = project.hasProperty('host') ? project.property('host') : 'localhost'
    def port = project.hasProperty('port') ? project.property('port') : '8080'

    args host, port

    standardInput = System.in
}



//gradle runServer -Pport=9099
task runServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = "Run the Server"
    main = 'Server.Server'

    // Provide a default port if none is passed
    def port = project.hasProperty('port') ? project.property('port') : '8080'

    args port
}
