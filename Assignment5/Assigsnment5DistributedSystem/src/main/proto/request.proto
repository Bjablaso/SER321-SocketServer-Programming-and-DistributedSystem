syntax = "proto2";

package operation;

option java_package = "buffers";
option java_outer_classname = "RequestProtos";

message Request {
  enum OperationType {
    CLIENTNAME = 0;     // Client identifies itself
    NODEID = 1;         // Node identifies itself
    DATA = 2;           // Client sends numbers + delay to the Leader
    CALCULATE = 3;      // Leader sends task to Nodes
    PARTIAL_SUM = 4;    // Node sends computed sum to Leader
    VERIFY_SUM = 5;     // Leader asks nodes to cross-check sums from other nodes
    CONSENSUS_CHECK = 6;// Nodes send agreement/disagreement on sum validity
    INFORM = 7;         // Leader informs nodes of final computed sum
  }

  optional OperationType operationType = 1 [default = CLIENTNAME];
  optional string senderId = 2;         // Unique identifier for Client, Leader, or Node
  optional string numbers = 3;           // what send to leader
  optional int64 delay = 4;             // Delay in milliseconds before each sum operation
  optional int32 partialSum = 5;        // Nodes send computed sum result back to Leader
  optional bool faulty = 6;             // If true, the node simulates a fault (incorrect sum)
  optional bool consensusCheck = 7;     // If true, this request is part of the consensus process
  optional int32 finalSum = 8;          // Leader informs nodes of the final computed sum
  optional string originalNodeId = 9;   // The Node that originally computed the sum (for verification)
  repeated int32 originalNumbers = 10;  // The numbers originally assigned to the other Node
  optional int32 reportedSum = 11;      // The sum reported by the original Node
  repeated int32 portion = 13; // what send to each node

  optional Connection connectiontType = 12 [default = CONNECT];
}


enum Connection {
  CONNECT = 0;      // When Client connects to Server
  ACKNOWLEDGE = 1;  // When Server acknowledges Client connection
  CHECK = 2;        // When Server (Leader) checks if a Node is alive (heartbeat)
  LOST = 3;         // When a Leader or Node disconnects
}


message LogMessage {
  repeated string log = 1;
}